name: Docker QEMU

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        description: Short name of the image, defaults to the repo name
      security-category:
        type: string
      push:
        type: string
        description: Docker push input
      dockerfile:
        type: string
        description: Dockerfile path
      context:
        type: string
        description: Dockerfile path
      platforms:
        type: string
        description: Platforms to build
      build-args:
        type: string
        description: Docker build args
      version:
        type: string
        description: App version
      version-from-artifact:
        type: string
        description: App version from artifact name

jobs:
  matrix:
    runs-on: ubuntu-24.04
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - id: platforms
        run: |
          platforms="${{ inputs.platforms }}"
          platforms=(${platforms//,/ })
          platformsJSON='['

          # Check if linux/arm64 is in the platforms list
          # if so, remove it and add it to platformsJSON
          for platform in "${platforms[@]}"; do
            if [[ "$platform" == "linux/arm64" ]]; then
              platforms=(${platforms[@]/$platform})
              platformsJSON+='"linux/arm64"'
            fi
          done

          # Check if there are any platforms left, if so create a comma separated list
          # and add it as a string to platformsJSON
          i=0
          if [[ ${#platforms[@]} -gt 0 ]]; then
            if [[ $i -gt 0 ]]; then
              platformsJSON+=','
            fi
            platformsJSON+='"'
            for platform in "${platforms[@]}"; do
              platformsJSON+="$platform"
              if [[ "$platform" != "${platforms[-1]}" ]]; then
                platformsJSON+=','
              fi
            done
            platformsJSON+='"'
          fi

          platformsJSON+=']'
          echo "platforms=${platformsJSON}" >> "$GITHUB_OUTPUT"

  docker:
    runs-on: ${{ contains(needs.matrix.outputs.matrix, 'linux/arm64') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    needs: [matrix]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.matrix.outputs.platforms) }}
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Platform pair
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Lowercase image name
        id: lowercase-image
        run: echo "IMAGE=${IMG,,}" >> $GITHUB_OUTPUT
        env:
          IMG: ${{ inputs.image-name }}

      - name: image name for digest
        run: |
          image=${{ steps.lowercase-image.outputs.IMAGE }}
          echo "IMAGE_SLUG=${image//\//-}" >> $GITHUB_ENV

      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        if: inputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: ${{ matrix.platform != 'linux/arm64' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.lowercase-image.outputs.IMAGE }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        id: docker_build
        with:
          context: ${{ inputs.context }}
          push: ${{ inputs.push }}
          pull: true
          provenance: mode=max
          sbom: true
          file: ${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ inputs.build-args }}
          outputs: type=image,"name=ghcr.io/${{ steps.lowercase-image.outputs.IMAGE }}",push-by-digest=${{ inputs.push }},name-canonical=true,push=${{ inputs.push }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          # Remove */ from matrix.platform
          name: digests-${{ env.IMAGE_SLUG }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-and-analyze:
    runs-on: ubuntu-24.04
    if: ${{ inputs.push == 'true' }}
    needs: [docker]
    permissions:
      packages: write
      security-events: write

    steps:
      - name: Lowercase image name
        id: lowercase-image
        run: echo "IMAGE=${IMG,,}" >> $GITHUB_OUTPUT
        env:
          IMG: ${{ inputs.image-name }}

      - name: image name for digest
        run: |
          image=${{ steps.lowercase-image.outputs.IMAGE }}
          echo "IMAGE_SLUG=${image//\//-}" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ env.IMAGE_SLUG }}-*
          merge-multiple: true

      - name: Log in to the Container registry
        if: inputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version artifact
        if: inputs.version == '' && inputs.version-from-artifact != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.version-from-artifact }}
          path: /tmp

      - name: Determine version
        id: version
        run: |
          if [ -f /tmp/version ]; then
            echo "version=$(cat /tmp/version)" >> $GITHUB_OUTPUT
          else
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.lowercase-image.outputs.IMAGE }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern=v{{version}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern=v{{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern=v{{version}},event=tag,enable=${{ steps.version.outputs.version == '' }}
            type=semver,pattern=v{{major}},event=tag,enable=${{ steps.version.outputs.version == '' }}
            type=semver,pattern=v{{major}}.{{minor}},event=tag,enable=${{ steps.version.outputs.version == '' }}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=semver,pattern={{version}},event=tag,enable=${{ steps.version.outputs.version == '' }}
            type=semver,pattern={{major}},event=tag,enable=${{ steps.version.outputs.version == '' }}
            type=semver,pattern={{major}}.{{minor}},event=tag,enable=${{ steps.version.outputs.version == '' }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") $(printf 'ghcr.io/${{ steps.lowercase-image.outputs.IMAGE }}@sha256:%s ' *)

      - name: Run Trivy vulnerability scanner
        if: inputs.push == 'true' && inputs.trivy == 'true'
        uses: aquasecurity/trivy-action@0.17.0
        with:
          image-ref: ghcr.io/${{ steps.lowercase-image.outputs.IMAGE }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          ignore-unfixed: true
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: inputs.push == 'true' && inputs.trivy == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: ${{ inputs.security-category }}
