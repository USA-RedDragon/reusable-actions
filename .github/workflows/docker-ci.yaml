name: Docker

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        description: Short name of the image, defaults to the repo name
        default: ${{ github.repository }}
      push:
        type: string
        description: Docker push input
        default: 'true'
      dockerfile:
        type: string
        description: Dockerfile path
        default: Dockerfile
      context:
        type: string
        description: Dockerfile path
        default: .
      platforms:
        type: string
        description: Platforms to build
        default: linux/amd64,linux/arm64
      build-args:
        type: string
        description: Docker build args

jobs:
  docker:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        if: inputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ inputs.image-name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Build Docker image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: ${{ inputs.context }}
          push: ${{ inputs.push }}
          pull: true
          provenance: true
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ inputs.build-args }}

      - name: Run Trivy vulnerability scanner
        if: inputs.push == 'true'
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ inputs.image-name }}@${{ steps.docker_build.outputs.imageid }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: inputs.push == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
